require(ISLR)
require(boot)
?cv.glm
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horespower, data = Auto)
cv.glm(Auto, glm.fit)$delta
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
cv.glm(Auto, glm.fit)$delta
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
result
size(Auto);
?Auto
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean(residuals((fit)/(1-h)^2))
}
loocv(glm.fit)
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
rep(0, 5)
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
cv.error =rep(0, 5)
degree = 1:5
for(d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data = Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
cv.error =rep(0, 5)
degree = 1:5
for(d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data = Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
# 10 fold CV
cv.error10 = rep(0, 5)
for(d in degree){
glm.fit = glm(mpg ~ poly(horsepower, d), data = Auto)
cv.error10[d] = cv.glm(Auto, glm.fit, k = 10)$delta[1]
}
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
cv.error =rep(0, 5)
degree = 1:5
for(d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data = Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
# 10 fold CV
cv.error10 = rep(0, 5)
for(d in degree){
glm.fit = glm(mpg ~ poly(horsepower, d), data = Auto)
cv.error10[d] = cv.glm(Auto, glm.fit, K = 10)$delta[1]
}
cv.error10
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
cv.error =rep(0, 5)
degree = 1:5
for(d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data = Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
# 10 fold CV
cv.error10 = rep(0, 5)
for(d in degree){
glm.fit = glm(mpg ~ poly(horsepower, d), data = Auto)
cvResult = cv.glm(Auto, glm.fit, K = 10)
cvResult
cv.error10[d] = cvResult$delta
}
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
cv.error =rep(0, 5)
degree = 1:5
for(d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data = Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
# 10 fold CV
cv.error10 = rep(0, 5)
for(d in degree){
glm.fit = glm(mpg ~ poly(horsepower, d), data = Auto)
cvResult = cv.glm(Auto, glm.fit, K = 10)
cvResult
cv.error10[d] = cvResult$delta[1]
}
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
cv.error =rep(0, 5)
degree = 1:5
for(d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data = Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
# 10 fold CV
cv.error10 = rep(0, 5)
for(d in degree){
glm.fit = glm(mpg ~ poly(horsepower, d), data = Auto)
cvResult = cv.glm(Auto, glm.fit, K = 10)
cvResult
cv.error10[d] = cvResult$delta[1]
}
fit = glm(mpg ~ poly(horsepower, d), data = Auto)
result = cv.glm(Auto, fit, K = 10)
result
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
cv.error =rep(0, 5)
degree = 1:5
for(d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data = Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
# 10 fold CV
cv.error10 = rep(0, 5)
for(d in degree){
glm.fit = glm(mpg ~ poly(horsepower, d), data = Auto)
cvResult = cv.glm(Auto, glm.fit, K = 10)
cvResult
cv.error10[d] = cvResult$delta[1]
}
lines(degree, cv,error10, type="b", col="red")
fit = glm(mpg ~ poly(horsepower, d), data = Auto)
result = cv.glm(Auto, fit, K = 10)
result
cv.error10
require(ISLR)
require(boot)
?cv.glm
plot(mpg~horsepower, data = Auto)
## LOOCV
glm.fit = glm(mpg~horsepower, data = Auto)
result = cv.glm(Auto, glm.fit)
loocv = function(fit){
h = lm.influence(fit)$h
mean( (residuals(fit)/(1-h))^2 )
}
loocv(glm.fit)
cv.error =rep(0, 5)
degree = 1:5
for(d in degree){
glm.fit = glm(mpg~poly(horsepower, d), data = Auto)
cv.error[d] = loocv(glm.fit)
}
plot(degree, cv.error, type="b")
# 10 fold CV
cv.error10 = rep(0, 5)
for(d in degree){
glm.fit = glm(mpg ~ poly(horsepower, d), data = Auto)
cvResult = cv.glm(Auto, glm.fit, K = 10)
cvResult
cv.error10[d] = cvResult$delta[1]
}
lines(degree, cv.error10, type="b", col="red")
fit = glm(mpg ~ poly(horsepower, d), data = Auto)
result = cv.glm(Auto, fit, K = 10)
result
?load
data = load("5.R.RData")
head(data)
data = load("5.R.RData")
data
data = load("5.R.RData")
5.R.RData
rm()
data = load("5.R.RData")
data
data = load("5.R.RData")
X
Xy
load("5.R.RData")
Xy$X1
load("5.R.RData")
Xy
head(Xy)
load("5.R.RData")
head(Xy)
pairs(Xy)
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(Y1~X1, data = Xy)
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
plot(y~X2, data = Xy)
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
plot(y~X2, data = Xy)
?corrgram::corrgram
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
plot(y~X2, data = Xy)
corrgram::corrgram(Xy)
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
plot(y~X2, data = Xy)
corrgram::corrgram(Xy)
fit = lm(formula = y ~ X1 + X2, data = Xy)
summary(fit)
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
plot(y~X2, data = Xy)
corrgram::corrgram(Xy)
fit = lm(formula = y ~ X1 + X2, data = Xy)
summary(fit)
matplot(Xy,type="l")
?matplot
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
plot(y~X2, data = Xy)
corrgram::corrgram(Xy)
fit = lm(formula = y ~ X1 + X2, data = Xy)
summary(fit)
matplot(Xy,type="l", col = c("red","green", "blue"))
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
plot(y~X2, data = Xy)
corrgram::corrgram(Xy)
fit = lm(formula = y ~ X1 + X2, data = Xy)
summary(fit)
matplot(Xy,type="l", col = c("red","green", "blue"))
summary(Xy$X1)
?hist
load("5.R.RData")
head(Xy)
pairs(Xy)
plot(y~X1, data = Xy)
plot(y~X2, data = Xy)
corrgram::corrgram(Xy)
fit = lm(formula = y ~ X1 + X2, data = Xy)
summary(fit)
matplot(Xy,type="l", col = c("red","green", "blue"))
summary(Xy$X1)
hist(Xy$X1)
